# -*- coding: utf-8 -*-
"""Copy of APT_Capstone_Project_19_Solution_copy_v0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M8FrJY0AvE0t7EkuzJs--9Md_adTLlT1

# Capstone Project 19: Early Diabetes Prediction

#### Goal of the Project

This project is designed for you to practice and solve the activities that are based on the concepts covered in the lessons:

  - Multipage Streamlit App I

  - Multipage Streamlit App II

  - Decision Trees I to Decision Trees IV

---

### Context

Diabetes is a chronic (long-lasting) health condition that affects how your body turns food into energy.

Most of the food you eat is broken down into sugar (also called glucose) and released into your bloodstream. When your blood sugar goes up, it signals your pancreas to release insulin. Insulin acts like a key to let the blood sugar into your body’s cells for use as energy.

If you have diabetes, your body either doesn’t make enough insulin or can’t use the insulin it makes as well as it should. When there isn’t enough insulin or cells stop responding to insulin, too much blood sugar stays in your bloodstream. Over time, that can cause serious health problems, such as heart disease, vision loss, and kidney disease.

There isn’t a cure yet for diabetes, but losing weight, eating healthy food, and being active can really help in reducing the impact of diabetes.

---

#### Problem Statement

In this project, you are going to create a Multipage Early Diabetes Prediction Web app using the Streamlit framework.

This web app will do the following:

- Predicts whether a person has diabetes or is prone to get diabetes in future by analysing the values of several features using the Decision Tree Classifier.

- Displays the correlation heatmap, confusion matrix plot and a decision tree plot.

---

### Dataset Description

This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset.

The dataset includes 768 instances with 7 features and 1 target column (`Outcome`) which can be briefed as:

|Field|Description|
|---:|:---|
|Pregnancies|Number of times pregnant|
|Glucose|Plasma glucose concentration in an oral glucose tolerance test|
|BloodPressure|Diastolic blood pressure (mm Hg)|
|SkinThickness|Triceps skin fold thickness (mm)|
|Insulin|2-Hour serum insulin (mu U/ml)|
|BMI|Body mass index (weight in $kg$ and height in $m^2$)|
|DiabetesPedigreeFunction|A function which scores likelihood of diabetes based on family history|
|Age|Age of the person|
|Outcome|0 - The person does not have diabetes|
||1 - The person has diabetes|


**Dataset Credits:** https://www.kaggle.com/uciml/pima-indians-diabetes-database

---

### Things to do

1. Design the **Home page** of the Web app to display the Dataset information.
  
2. Create Decision Tree classifier and Optimised Decision Tree using the `GridSearchCV` to predict diabetes based on the values of features.

3. Design the **Prediction page** of the Web app that allow users to select the values of the features and display the prediction results on a click of the `Predict` button.

4. Design the **Visualise Decision tree** page that allow users to

 - Get the top correlated features using a correlation heatmap.

 - Display the confusion matrix plot to get the performance of the classifier.

 - Visualise the classifier with the help of an actual decision tree plot.

---

#### Activity 1: Creating Python File for Diabetes Prediction Web App

In this activity, you have to create the `diabetes_main.py` file in Sublime editor and save it in the `Python_scripts` folder.

Copy the code given below in the `diabetes_main.py` file. You are already aware of this code which creates a function that will load the data from the csv file.

**Dataset Download Link:** https://s3-whjr-curriculum-uploads.whjr.online/b510b80d-2fd6-4c08-bfdf-2a24f733551d.csv

**Note:** Do not run the code shown below. It will throw an error.
"""

# !pip install streamlit

# Code for 'diabetes_main.py' file.

# Importing the necessary Python modules.
# import streamlit as st
# import numpy as np
# import pandas as pd

# # Configure your home page by setting its title and icon that will be displayed in a browser tab.
# st.set_page_config(page_title = 'Early Diabetes Prediction Web App',
#                     page_icon = 'random',
#                     layout = 'wide',
#                     initial_sidebar_state = 'auto'
#                     )

# # Loading the dataset.
# @st.cache()
# def load_data():
#     # Load the Diabetes dataset into DataFrame.

#     df = pd.read_csv('https://s3-whjr-curriculum-uploads.whjr.online/b510b80d-2fd6-4c08-bfdf-2a24f733551d.csv')
#     df.head()

#     # Rename the column names in the DataFrame.
#     df.rename(columns = {"BloodPressure": "Blood_Pressure",}, inplace = True)
#     df.rename(columns = {"SkinThickness": "Skin_Thickness",}, inplace = True)
#     df.rename(columns = {"DiabetesPedigreeFunction": "Pedigree_Function",}, inplace = True)

#     df.head()

#     return df

# diabetes_df = load_data()

"""---

#### Activity 2: Page Navigator

In this activity, you need to add radio button widgets to navigate through the **Home**, **Predict Diabetes** and **Visualise Decision Tree** web pages in the web app as shown in the image below:

<img src="https://i.imgur.com/1KMYS5M.png">

You need to create three empty Python files that are `diabetes_home.py`, `diabetes_predict` and `diabetes_plots.py` inside the same folder that contains the `diabetes_main.py`.

- When a user selects the `Home` option, the `diabetes_home.py` script will be rendered.

- When a user selects the `Predict Diabetes` option, the `diabetes_predict.py` script will be rendered.

- When a user selects the `Visualise Decision Tree` option, the `diabetes.py` script will be rendered.

To create this navigation bar, perform the following tasks in `diabetes_main.py` file:

1. Import the `diabetes_home.py`, `diabetes_predict` and `diabetes_plots.py` files in the `diabetes_main.py` respectively.

2. Create a dictionary, say `pages_dict`, with keys being the label to be displayed in the navigation bar and values being the name of Python script to be rendered:

  ```python
  pages_dict = {"Home": diabetes_home,
              "Predict Diabetes": diabetes_predict,
              "Visualise Decision Tree": diabetes_plots}
  ```

4. Add a title in the sidebar with the label `Navigation`.

5. Add a radio button widget with the label `Go to` and options as keys of the `pages_dict` dictionary. Pass these keys in the form of a list or a tuple as the options to the radio button widget can only be provided in the form of a list or a tuple.

6. Store the current value of this radio button widget in a `user_choice` variable.

6. Obtain the corresponding value of the key stored in the `user_choice` variable by passing it to the `pages_dict` dictionary. Store the value obtained from the  dictionary in a variable, say `selected_page`. It will have any value amongst `diabetes_home.py`, `diabetes_predict` or `diabetes_plots.py`.

7. Call the user defined `app()` function using `selected_page` variable and pass `diabetes_df` as input to the `app()` function.
"""

# Create the Page Navigator for 'Home', 'Predict Diabetes' and 'Visualise Decision Tree' web pages in 'diabetes_main.py'
# Import the 'diabetes_predict' 'diabetes_home', 'diabetes_plots' Python files


"""After this activity, the user must be able to navigate between Home page, Prediction Diabetes Page and Visualise Decision Tree  page using the radio buttons in the sidebar.

---

#### Activity 3: Home Page Configuration

Open the blank `diabetes_home.py` file that you had created in the previous activity. Create a function `app()` in this file with `diabetes_df` as its input and perform the following tasks within this `app()` function:

1. Write the following descrition of the Web app and style it using the `markdown()` function of Streamlit.

  ```
  Diabetes is a chronic (long-lasting) health condition that affects how your body turns food into energy.
                
  There isn’t a cure yet for diabetes, but losing weight, eating healthy food, and being active can really help in reducing the impact of diabetes.

  This Web app will help you to predict whether a person has diabetes or is prone to get diabetes in future by analysing the values of several features using the Decision Tree Classifier.
  
  ```

2. Add the code to display and hide the entire dataset using `st.beta_expander()` and `st.dataframe()` widget.

3. Display column names, column data types and column data with the click of checkbox.

4. Show dataset summary with the click of a checkbox.
"""

# Show complete dataset and summary in 'diabetes_home.py'
# Import the streamlit modules.


"""**Expected Output:**

<img src="https://i.imgur.com/dNtxSgO.png"/>

After this activity, the home page of the web app will allow the user to view the complete dataset as well as view summary of the dataset.

---

#### Activity 4: Prediction Page Configuration

Open the blank `diabetes_predict.py` file that you had created in  **Activity 2: Page Navigator**. Create two functions `d_tree_pred()` and `grid_tree_pred()` to design the Decision Tree Classifier.

The `d_tree_pred()` function takes the following feature variables as input to predict the diabetes:
- `diabetes_df`
- `glucose`
- `bp`
- `insulin`
- `bmi`
- `pedigree`
- `age`

Inside this function,

1. Split the original DataFrame into train and test sets.

2. Create an object (say `dtree_clf`) of the `DecisionTreeClassifier()` class.

3. Inside the `DecisionTreeClassifier()` constructor, pass the following two parameters:

 - `criterion = entropy`

 - `max_depth = 3`

4. Call the `fit()` function on the above constructor with train features and target variables as inputs.

5. Get the predicted target values by passing the above features inside the `predict()` function on `dtree_clf` and store the result in a variable `prediction`. Use indexing to obtain the predicted value i.e. `prediction = prediction[0]`.

6. Get the accuracy score on the train set by calling the `accuracy_score()` function on the `metrics` object and store the result in a variable `score`.

7. Return the `prediction` and `score`.
"""

# Import the necessary modules design the Decision Tree classifier
import numpy as np
import pandas as pd
import streamlit as st
from sklearn.metrics import r2_score, mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
from sklearn import tree
from sklearn import metrics

# Create the 'd_tree_pred' function to predict the diabetes using the Decision Tree classifier
@st.cache()
def d_tree_pred(diabetes_df, glucose, bp, insulin, bmi, pedigree, age):
    # Split the train and test dataset.
    feature_columns = list(diabetes_df.columns)

    # Remove the 'Pregnancies', Skin_Thickness' columns and the 'target' column from the feature columns
    feature_columns.remove('Skin_Thickness')
    feature_columns.remove('Pregnancies')
    feature_columns.remove('Outcome')

    X = diabetes_df[feature_columns]
    y = diabetes_df['Outcome']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)

    dtree_clf = DecisionTreeClassifier(criterion="entropy", max_depth=3)
    dtree_clf.fit(X_train, y_train)
    y_train_pred = dtree_clf.predict(X_train)
    y_test_pred = dtree_clf.predict(X_test)
    # Predict diabetes using the 'predict()' function.
    prediction = dtree_clf.predict([[glucose, bp, insulin, bmi, pedigree, age]])
    prediction = prediction[0]

    score = round(metrics.accuracy_score(y_train, y_train_pred) * 100, 3)

    return prediction, score

"""---

#### Activity 5: `GridSearchCV` Decision Tree Classifier

In this activity you need to run the `GridSearchCV` for classifier optimisation.

Create the `grid_tree_pred()` function below the `d_tree_pred` function in `diabetes_predict.py` file. This function takes the following feature variables as input:
- `diabetes_df`
- `glucose`
- `bp`
- `insulin`
- `bmi`
- `pedigree`
- `age`

Inside this function:

 - First define a `param_grid` to select which parameters from `DecisionTreeClassifier` class you want to run the optimisation. Let us set:
  - `criterion`: `['gini','entropy']`
  - `max_depth`: `4` to `20`.
  - `random_state`: `[42]`

- Contruct a decision tree grid `grid_tree` using `GridSearchCV` function with following inputs:

 - `DecisionTreeClassifier`
 - `param_grid`
 - `scoring`

- Call the `fit()` function on the `grid_tree` using `X_train` and `y_train` as input.

- Create an object `best_tree` and assign it the best decision tree model using `best_estimator_` atribute from `GridSearchCV`.

- Get the predicted target values by passing the features inside the `predict()` function on `best_tree` object and store the result in a variable `prediction`.

- Print the score achieved by the best classifier using `grid_tree.best_score_` and display the score in percentge.

- Return the `prediction` and `score`.
"""

def grid_tree_pred(diabetes_df, glucose, bp, insulin, bmi, pedigree, age):
    feature_columns = list(diabetes_df.columns)
    # Remove the 'Pregnancies', 'Skin_Thickness' columns and the 'target' column from the feature columns
    feature_columns.remove('Pregnancies')
    feature_columns.remove('Skin_Thickness')
    feature_columns.remove('Outcome')
    X = diabetes_df[feature_columns]
    y = diabetes_df['Outcome']
    # Split the train and test dataset.
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)

    param_grid = {'criterion':['gini','entropy'], 'max_depth': np.arange(4,21), 'random_state': [42]}

    # Create a grid
    grid_tree = GridSearchCV(DecisionTreeClassifier(), param_grid, scoring = 'roc_auc', n_jobs = -1)

    # Training
    grid_tree.fit(X_train, y_train)
    best_tree = grid_tree.best_estimator_

    # Predict diabetes using the 'predict()' function.
    prediction = best_tree.predict([[glucose, bp, insulin, bmi, pedigree, age]])
    prediction = prediction[0]

    score = round(grid_tree.best_score_ * 100, 3)

    return prediction, score

"""---

#### Activity 6: The Prediction Page Configuration

Perform the following tasks in `diabetes_predict.py` page below `grid_tree_pred()` function:

1. Create an user-defined function, say `app()` with `diabetes_df` as its input to perform their respective tasks.

2. Create six streamlit slider widgets for selecting the values of features (`Glucose`, `Blood_Pressure`, `Insulin`, `BMI`, `Pedigree_Function` and `Age`)  with their minimum and maximum values. Store the widgets in their respective variables.

3. Create a drop down menu to select the classifier.
  - Decision Tree Classifier
  - GridSearchCV Best Tree Classifier

4. If Decision Tree Classifier is selected, pass the values selected in the slider inside the `d_tree_pred` function to predict the diabetes on a click of a button as follows:  

  `prediction, score = d_tree_pred(diabetes_df, glucose, bp, insulin, bmi, pedigree, age)`

5. If `prediction == 1`, display `The person either has diabetes or prone to get diabetes`, else display `The person is free from diabetes`.

6. Also display the accuracy score of the model that is stored in the `score` variable.

Similarly, If GridSearchCV Best Tree Classifier is selected, pass the values selected using the slider inside the `grid_tree_pred()` function to predict the diabetes on a click of a button.
"""

# Create the user defined 'app()' function.
def app(diabetes_df):
    st.markdown("<p style='color:red;font-size:25px'>This app uses <b>Decision Tree Classifier</b> for the Early Prediction of Diabetes.", unsafe_allow_html = True)
    st.subheader("Select Values:")

    glucose = st.slider("Glucose", int(diabetes_df["Glucose"].min()), int(diabetes_df["Glucose"].max()))
    bp = st.slider("Blood Pressure", int(diabetes_df["Blood_Pressure"].min()), int(diabetes_df["Blood_Pressure"].max()))
    insulin = st.slider("Insulin", int(diabetes_df["Insulin"].min()), int(diabetes_df["Insulin"].max()))
    bmi = st.slider("BMI", float(diabetes_df["BMI"].min()), float(diabetes_df["BMI"].max()))
    pedigree = st.slider("Pedigree Function", float(diabetes_df["Pedigree_Function"].min()), float(diabetes_df["Pedigree_Function"].max()))
    age = st.slider("Age", int(diabetes_df["Age"].min()), int(diabetes_df["Age"].max()))


    st.subheader("Model Selection")

    # Add a single select drop down menu with label 'Select the Classifier'
    predictor = st.selectbox("Select the Decision Tree Classifier",('Decision Tree Classifier', 'GridSearchCV Best Tree Classifier'))

    if predictor == 'Decision Tree Classifier':
        if st.button("Predict"):
            prediction, score = d_tree_pred(diabetes_df, glucose, bp, insulin, bmi, pedigree, age)
            st.subheader("Decision Tree Prediction results:")
            if prediction == 1:
                st.info("The person either has diabetes or prone to get diabetes")
            else:
                st.info("The person is free from diabetes")
            st.write("The accuracy score of this model is", score, "%")


    elif predictor == 'GridSearchCV Best Tree Classifier':
        if st.button("Predict"):
            prediction, score = grid_tree_pred(diabetes_df, glucose, bp, insulin, bmi, pedigree, age)
            st.subheader("Optimised Decision Tree Prediction results:")
            if prediction == 1:
                st.info("The person either has diabetes or prone to get diabetes")
            else:
                st.info("The person is free from diabetes")
            st.write("The best score of this model is", score, "%")

"""**Expected Output:**

<img src="https://s3-whjr-v2-prod-bucket.whjr.online/4ea07d40-12bd-4edc-a68d-dfafee57e49a.gif"/>

---

#### Activity 7: Visualise the Decision Tree Classifier

Open the blank `diabetes_plots.py` file that you had created in  **Activity 3:Page Navigator**. Create an `app()` function in this file with `diabetes_df` as its input and perform the following tasks within this `app()` function:

1. Add the code to display the correlation heatmap on a click of a checkbox.

2. Add a `selectbox` widget with label `Select the Classifier` to select the Classifier model (Decision Tree Classifier and GridSearchCV Best Tree Classifier).

3. If Decision Tree classifier is selected, fit the decision tree model and plot the confusion matrix and decision tree for the Decision Tree classifier.

4. If GridSearchCV Best Tree Classifier is selected, fit the GridSearchCV best tree model and plot the confusion matrix and decision tree for the classifier.
"""

# Code for 'diabetes_plot.py' file.


"""**Expected Output:**

<img src="https://s3-whjr-v2-prod-bucket.whjr.online/349f5dbb-f7c8-4836-89d8-bf9234f8738a.gif"/>

After this activity, the user must be able to predict diabetes and visualise the classifier models using the decision tree plots and confusion matrix.

**Note to the Teacher:** You can refer to this GitHub link to view all the four Python files:

https://github.com/whitehatjr-test/diabetes_prediction

---
"""